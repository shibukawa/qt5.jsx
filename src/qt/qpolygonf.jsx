/*
 * JSX wrapper code generated by JSXgenerator.
 *
 * QPolygonF class
 *
 * Note: DO NOT EDIT THIS FILE
 */
import "qt/qpointf.jsx";
import "qt/qpolygon.jsx";
import "qt/qrectf.jsx";
import "qt/qt.jsx";

native class QPolygonF
{
    function constructor ();
    function constructor (a : QPolygon);
    function constructor (a : QPolygonF);
    function constructor (r : QRectF);
    function constructor (v : QPointF[]);
    function constructor (size : int);

    // Static Members
    static function fromList (list : QPointF[]) : QPointF[];

    // Methods
    function append (t : QPointF) : void;
    function at (i : int) : QPointF;
    function boundingRect () : QRectF;
    function capacity () : int;
    function clear () : void;
    function contains (t : QPointF) : boolean;
    function containsPoint (pt : QPointF, fillRule : Qt_FillRule) : boolean;
    function count () : int;
    function count (t : QPointF) : int;
    function empty () : boolean;
    function endsWith (t : QPointF) : boolean;
    function fill (t : QPointF, size : int) : QPointF[];
    function first () : QPointF;
    function indexOf (t : QPointF, from : int) : int;
    function intersected (r : QPolygonF) : QPolygonF;
    function isClosed () : boolean;
    function isEmpty () : boolean;
    function isSharedWith (other : QPointF[]) : boolean;
    function last () : QPointF;
    function lastIndexOf (t : QPointF, from : int) : int;
    function length () : int;
    function mid (pos : int, len : int) : QPointF[];
    function operator_equal (v : QPointF[]) : boolean;
    function pop_back () : void;
    function pop_front () : void;
    function prepend (t : QPointF) : void;
    function push_back (t : QPointF) : void;
    function push_front (t : QPointF) : void;
    function remove (i : int) : void;
    function remove (i : int, n : int) : void;
    function removeAt (i : int) : void;
    function removeFirst () : void;
    function removeLast () : void;
    function replace (i : int, t : QPointF) : void;
    function reserve (size : int) : void;
    function resize (size : int) : void;
    function setSharable (sharable : boolean) : void;
    function size () : int;
    function squeeze () : void;
    function startsWith (t : QPointF) : boolean;
    function subtracted (r : QPolygonF) : QPolygonF;
    function swap (other : QPolygonF) : void;
    function takeAt (i : int) : QPointF;
    function takeFirst () : QPointF;
    function takeLast () : QPointF;
    function toList () : QPointF[];
    function toPolygon () : QPolygon;
    function translate (offset : QPointF) : void;
    function translate (dx : number, dy : number) : void;
    function translated (offset : QPointF) : QPolygonF;
    function translated (dx : number, dy : number) : QPolygonF;
    function united (r : QPolygonF) : QPolygonF;
    function value (i : int) : QPointF;
    function value (i : int, defaultValue : QPointF) : QPointF;
}
