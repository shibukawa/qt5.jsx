/*
 * JSX wrapper code generated by JSXgenerator.
 *
 * QImageIOHandler class
 *
 * Note: DO NOT EDIT THIS FILE
 */
import "qt/qbytearray.jsx";
import "qt/qimage.jsx";
import "qt/qiodevice.jsx";
import "qt/qrect.jsx";

final native class Qt_QImageIOHandler_ImageOption {}

native class QImageIOHandler
{
    function constructor ();

    static const Size : Qt_QImageIOHandler_ImageOption;
    static const ClipRect : Qt_QImageIOHandler_ImageOption;
    static const Description : Qt_QImageIOHandler_ImageOption;
    static const ScaledClipRect : Qt_QImageIOHandler_ImageOption;
    static const ScaledSize : Qt_QImageIOHandler_ImageOption;
    static const CompressionRatio : Qt_QImageIOHandler_ImageOption;
    static const Gamma : Qt_QImageIOHandler_ImageOption;
    static const Quality : Qt_QImageIOHandler_ImageOption;
    static const Name : Qt_QImageIOHandler_ImageOption;
    static const SubType : Qt_QImageIOHandler_ImageOption;
    static const IncrementalReading : Qt_QImageIOHandler_ImageOption;
    static const Endianness : Qt_QImageIOHandler_ImageOption;
    static const Animation : Qt_QImageIOHandler_ImageOption;
    static const BackgroundColor : Qt_QImageIOHandler_ImageOption;
    static const ImageFormat : Qt_QImageIOHandler_ImageOption;
    static function ImageOption(value : Qt_QImageIOHandler_ImageOption) : Qt_QImageIOHandler_ImageOption;

    // Methods
    function canRead () : boolean;
    function currentImageNumber () : int;
    function currentImageRect () : QRect;
    function device () : QIODevice;
    function format () : QByteArray;
    function imageCount () : int;
    function jumpToImage (imageNumber : int) : boolean;
    function jumpToNextImage () : boolean;
    function loopCount () : int;
    function nextImageDelay () : int;
    function option (option : Qt_QImageIOHandler_ImageOption) : variant;
    function read (image : QImage) : boolean;
    function setDevice (device : QIODevice) : void;
    function setFormat (format : QByteArray) : void;
    function setOption (option : Qt_QImageIOHandler_ImageOption, value : variant) : void;
    function supportsOption (option : Qt_QImageIOHandler_ImageOption) : boolean;
    function write (image : QImage) : boolean;
}
