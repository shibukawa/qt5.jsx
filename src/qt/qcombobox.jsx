/*
 * JSX wrapper code generated by JSXgenerator.
 *
 * QComboBox class
 *
 * Note: DO NOT EDIT THIS FILE
 */
import "qt/qabstractitemdelegate.jsx";
import "qt/qabstractitemmodel.jsx";
import "qt/qabstractitemview.jsx";
import "qt/qcompleter.jsx";
import "qt/qicon.jsx";
import "qt/qlineedit.jsx";
import "qt/qmodelindex.jsx";
import "qt/qsize.jsx";
import "qt/qstyleoptioncombobox.jsx";
import "qt/qt.jsx";
import "qt/qvalidator.jsx";
import "qt/qwidget.jsx";
import "qt/_signals.jsx";

final native class Qt_QComboBox_SizeAdjustPolicy {}

final native class Qt_QComboBox_InsertPolicy {}

native class QComboBox extends QWidget
{
    function constructor (parent : QWidget);

    static const AdjustToContents : Qt_QComboBox_SizeAdjustPolicy;
    static const AdjustToContentsOnFirstShow : Qt_QComboBox_SizeAdjustPolicy;
    static const AdjustToMinimumContentsLength : Qt_QComboBox_SizeAdjustPolicy;
    static const AdjustToMinimumContentsLengthWithIcon : Qt_QComboBox_SizeAdjustPolicy;
    static function SizeAdjustPolicy(value : Qt_QComboBox_SizeAdjustPolicy) : Qt_QComboBox_SizeAdjustPolicy;

    static const NoInsert : Qt_QComboBox_InsertPolicy;
    static const InsertAtTop : Qt_QComboBox_InsertPolicy;
    static const InsertAtCurrent : Qt_QComboBox_InsertPolicy;
    static const InsertAtBottom : Qt_QComboBox_InsertPolicy;
    static const InsertAfterCurrent : Qt_QComboBox_InsertPolicy;
    static const InsertBeforeCurrent : Qt_QComboBox_InsertPolicy;
    static const InsertAlphabetically : Qt_QComboBox_InsertPolicy;
    static function InsertPolicy(value : Qt_QComboBox_InsertPolicy) : Qt_QComboBox_InsertPolicy;

    // Methods
    function addItem (icon : QIcon, text : string, userData : variant) : void;
    function addItem (text : string, userData : variant) : void;
    function addItems (texts : string[]) : void;
    function completer () : QCompleter;
    function findData (data : variant, role : int, flags : Qt_MatchFlags) : int;
    function findText (text : string, flags : Qt_MatchFlags) : int;
    function hidePopup () : void;
    function initStyleOption (option : QStyleOptionComboBox) : void;
    function insertItem (index : int, icon : QIcon, text : string, userData : variant) : void;
    function insertItem (index : int, text : string, userData : variant) : void;
    function insertItems (index : int, texts : string[]) : void;
    function insertSeparator (index : int) : void;
    function itemData (index : int, role : int) : variant;
    function itemDelegate () : QAbstractItemDelegate;
    function itemIcon (index : int) : QIcon;
    function itemText (index : int) : string;
    function lineEdit () : QLineEdit;
    function model () : QAbstractItemModel;
    function removeItem (index : int) : void;
    function rootModelIndex () : QModelIndex;
    function setCompleter (c : QCompleter) : void;
    function setItemData (index : int, value : variant, role : int) : void;
    function setItemDelegate (delegate : QAbstractItemDelegate) : void;
    function setItemIcon (index : int, icon : QIcon) : void;
    function setItemText (index : int, text : string) : void;
    function setLineEdit (edit : QLineEdit) : void;
    function setModel (model : QAbstractItemModel) : void;
    function setRootModelIndex (index : QModelIndex) : void;
    function setValidator (v : QValidator) : void;
    function setView (itemView : QAbstractItemView) : void;
    function showPopup () : void;
    function validator () : QValidator;
    function view () : QAbstractItemView;

    // Slots
    function clear () : void;
    function clearEditText () : void;
    function setEditText (text : string) : void;

    // Signals
    var activated : QtJSXintSignal;
    var currentIndexChanged : QtJSXintSignal;
    var currentTextChanged : QtJSXQStringSignal;
    var editTextChanged : QtJSXQStringSignal;
    var highlighted : QtJSXintSignal;

    // Instance Properties
    var editable : boolean;
    var count : int;
    var currentText : string;
    var currentIndex : int;
    var currentData : variant;
    var maxVisibleItems : int;
    var maxCount : int;
    var insertPolicy : Qt_QComboBox_InsertPolicy;
    var sizeAdjustPolicy : Qt_QComboBox_SizeAdjustPolicy;
    var minimumContentsLength : int;
    var iconSize : QSize;
    var autoCompletion : boolean;
    var autoCompletionCaseSensitivity : Qt_CaseSensitivity;
    var duplicatesEnabled : boolean;
    var frame : boolean;
    var modelColumn : int;
} = '''QComboBox;
QComboBox.prototype.activated = QComboBox.prototype['activated(int)'];
QComboBox.prototype.currentIndexChanged = QComboBox.prototype['currentIndexChanged(int)'];
QComboBox.prototype.highlighted = QComboBox.prototype['highlighted(int)'];
''';
