/*
 * JSX wrapper code generated by JSXgenerator.
 *
 * QQuaternion class
 *
 * Note: DO NOT EDIT THIS FILE
 */
import "qt/qvector3d.jsx";
import "qt/qvector4d.jsx";

native class QQuaternion
{
    function constructor ();
    function constructor (vector : QVector4D);
    function constructor (scalar : number, vector : QVector3D);
    function constructor (scalar : number, xpos : number, ypos : number, zpos : number);

    // Static Members
    static function fromAxisAndAngle (axis : QVector3D, angle : number) : QQuaternion;
    static function nlerp (q1 : QQuaternion, q2 : QQuaternion, t : number) : QQuaternion;
    static function slerp (q1 : QQuaternion, q2 : QQuaternion, t : number) : QQuaternion;

    // Methods
    function conjugate () : QQuaternion;
    function isIdentity () : boolean;
    function isNull () : boolean;
    function length () : number;
    function lengthSquared () : number;
    function normalize () : void;
    function normalized () : QQuaternion;
    function operator_add_assign (quaternion : QQuaternion) : QQuaternion;
    function operator_divide_assign (divisor : number) : QQuaternion;
    function operator_equal (q2 : QQuaternion) : boolean;
    function operator_multiply_assign (quaternion : QQuaternion) : QQuaternion;
    function operator_multiply_assign (factor : number) : QQuaternion;
    function operator_subtract_assign (quaternion : QQuaternion) : QQuaternion;
    function rotatedVector (vector : QVector3D) : QVector3D;
    function scalar () : number;
    function setScalar (scalar : number) : void;
    function setVector (vector : QVector3D) : void;
    function setVector (x : number, y : number, z : number) : void;
    function setX (x : number) : void;
    function setY (y : number) : void;
    function setZ (z : number) : void;
    function toVector4D () : QVector4D;
    function vector () : QVector3D;
    function x () : number;
    function y () : number;
    function z () : number;
}
