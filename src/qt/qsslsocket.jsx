/*
 * JSX wrapper code generated by JSXgenerator.
 *
 * QSslSocket class
 *
 * Note: DO NOT EDIT THIS FILE
 */
import "qt/qabstractsocket.jsx";
import "qt/qbytearray.jsx";
import "qt/qiodevice.jsx";
import "qt/qobject.jsx";
import "qt/qregexp.jsx";
import "qt/qssl.jsx";
import "qt/qsslcertificate.jsx";
import "qt/qsslcipher.jsx";
import "qt/qsslconfiguration.jsx";
import "qt/qsslerror.jsx";
import "qt/qsslkey.jsx";
import "qt/qtcpsocket.jsx";
import "qt/_signals.jsx";

final native class Qt_QSslSocket_PeerVerifyMode {}

final native class Qt_QSslSocket_SslMode {}

native class QSslSocket extends QTcpSocket
{
    function constructor (parent : QObject);

    // Static Members
    static function addDefaultCaCertificate (certificate : QSslCertificate) : void;
    static function addDefaultCaCertificates (certificates : QSslCertificate[]) : void;
    static function defaultCaCertificates () : QSslCertificate[];
    static function defaultCiphers () : QSslCipher[];
    static function setDefaultCaCertificates (certificates : QSslCertificate[]) : void;
    static function setDefaultCiphers (ciphers : QSslCipher[]) : void;
    static function sslLibraryVersionNumber () : int;
    static function sslLibraryVersionString () : string;
    static function supportedCiphers () : QSslCipher[];
    static function supportsSsl () : boolean;
    static function systemCaCertificates () : QSslCertificate[];

    static const VerifyNone : Qt_QSslSocket_PeerVerifyMode;
    static const QueryPeer : Qt_QSslSocket_PeerVerifyMode;
    static const VerifyPeer : Qt_QSslSocket_PeerVerifyMode;
    static const AutoVerifyPeer : Qt_QSslSocket_PeerVerifyMode;
    static function PeerVerifyMode(value : Qt_QSslSocket_PeerVerifyMode) : Qt_QSslSocket_PeerVerifyMode;

    static const UnencryptedMode : Qt_QSslSocket_SslMode;
    static const SslClientMode : Qt_QSslSocket_SslMode;
    static const SslServerMode : Qt_QSslSocket_SslMode;
    static function SslMode(value : Qt_QSslSocket_SslMode) : Qt_QSslSocket_SslMode;

    // Methods
    function addCaCertificate (certificate : QSslCertificate) : void;
    function addCaCertificates (certificates : QSslCertificate[]) : void;
    function addCaCertificates (path : string, format : Qt_QSsl_EncodingFormat, syntax : Qt_QRegExp_PatternSyntax) : boolean;
    function caCertificates () : QSslCertificate[];
    function ciphers () : QSslCipher[];
    function connectToHostEncrypted (hostName : string, port : int, mode : Qt_QIODevice_OpenMode, protocol : Qt_QAbstractSocket_NetworkLayerProtocol) : void;
    function connectToHostEncrypted (hostName : string, port : int, sslPeerName : string, mode : Qt_QIODevice_OpenMode, protocol : Qt_QAbstractSocket_NetworkLayerProtocol) : void;
    function encryptedBytesAvailable () : number;
    function encryptedBytesToWrite () : number;
    function ignoreSslErrors (errors : QSslError[]) : void;
    function isEncrypted () : boolean;
    function localCertificate () : QSslCertificate;
    function localCertificateChain () : QSslCertificate[];
    function mode () : Qt_QSslSocket_SslMode;
    function peerCertificate () : QSslCertificate;
    function peerCertificateChain () : QSslCertificate[];
    function peerVerifyDepth () : int;
    function peerVerifyMode () : Qt_QSslSocket_PeerVerifyMode;
    function peerVerifyName () : string;
    function privateKey () : QSslKey;
    function protocol () : Qt_QSsl_SslProtocol;
    function sessionCipher () : QSslCipher;
    function setCaCertificates (certificates : QSslCertificate[]) : void;
    function setCiphers (ciphers : QSslCipher[]) : void;
    function setCiphers (ciphers : string) : void;
    function setLocalCertificate (certificate : QSslCertificate) : void;
    function setLocalCertificate (fileName : string, format : Qt_QSsl_EncodingFormat) : void;
    function setLocalCertificateChain (localChain : QSslCertificate[]) : void;
    function setPeerVerifyDepth (depth : int) : void;
    function setPeerVerifyMode (mode : Qt_QSslSocket_PeerVerifyMode) : void;
    function setPeerVerifyName (hostName : string) : void;
    function setPrivateKey (key : QSslKey) : void;
    function setPrivateKey (fileName : string, algorithm : Qt_QSsl_KeyAlgorithm, format : Qt_QSsl_EncodingFormat, passPhrase : QByteArray) : void;
    function setProtocol (protocol : Qt_QSsl_SslProtocol) : void;
    function setSslConfiguration (config : QSslConfiguration) : void;
    function sslConfiguration () : QSslConfiguration;
    function waitForEncrypted (msecs : int) : boolean;

    // Slots
    function ignoreSslErrors () : void;
    function startClientEncryption () : void;
    function startServerEncryption () : void;

    // Signals
    var encrypted : QtJSXSignal;
    var encryptedBytesWritten : QtJSXqint64Signal;
    var modeChanged : QtJSXQt_QSslSocket_SslModeSignal;
    var peerVerifyError : QtJSXQSslErrorSignal;
    var sslErrors : QtJSXQSslErrorListSignal;
}
