/*
 * JSX wrapper code generated by JSXgenerator.
 *
 * QNetworkProxy class
 *
 * Note: DO NOT EDIT THIS FILE
 */
import "qt/qbytearray.jsx";
import "qt/qnetworkrequest.jsx";

final native class Qt_QNetworkProxy_ProxyType {}

final native class Qt_QNetworkProxy_Capability {}

final native class Qt_QNetworkProxy_Capabilities {}

native class QNetworkProxy
{
    function constructor ();
    function constructor (type : Qt_QNetworkProxy_ProxyType, hostName : string, port : int, user : string, password : string);
    function constructor (other : QNetworkProxy);

    // Static Members
    static function applicationProxy () : QNetworkProxy;
    static function setApplicationProxy (proxy : QNetworkProxy) : void;

    static const DefaultProxy : Qt_QNetworkProxy_ProxyType;
    static const Socks5Proxy : Qt_QNetworkProxy_ProxyType;
    static const NoProxy : Qt_QNetworkProxy_ProxyType;
    static const HttpProxy : Qt_QNetworkProxy_ProxyType;
    static const HttpCachingProxy : Qt_QNetworkProxy_ProxyType;
    static const FtpCachingProxy : Qt_QNetworkProxy_ProxyType;
    static function ProxyType(value : Qt_QNetworkProxy_ProxyType) : Qt_QNetworkProxy_ProxyType;

    static const TunnelingCapability : Qt_QNetworkProxy_Capability;
    static const ListeningCapability : Qt_QNetworkProxy_Capability;
    static const UdpTunnelingCapability : Qt_QNetworkProxy_Capability;
    static const CachingCapability : Qt_QNetworkProxy_Capability;
    static const HostNameLookupCapability : Qt_QNetworkProxy_Capability;
    static function Capability(value : Qt_QNetworkProxy_Capability) : Qt_QNetworkProxy_Capability;
    static function Capabilities(...value : Qt_QNetworkProxy_Capability) : Qt_QNetworkProxy_Capabilities;

    // Methods
    function capabilities () : Qt_QNetworkProxy_Capabilities;
    function hasRawHeader (headerName : QByteArray) : boolean;
    function header (header : Qt_QNetworkRequest_KnownHeaders) : variant;
    function hostName () : string;
    function isCachingProxy () : boolean;
    function isTransparentProxy () : boolean;
    function operator_equal (other : QNetworkProxy) : boolean;
    function password () : string;
    function port () : int;
    function rawHeader (headerName : QByteArray) : QByteArray;
    function rawHeaderList () : QByteArray[];
    function setCapabilities (capab : Qt_QNetworkProxy_Capabilities) : void;
    function setHeader (header : Qt_QNetworkRequest_KnownHeaders, value : variant) : void;
    function setHostName (hostName : string) : void;
    function setPassword (password : string) : void;
    function setPort (port : int) : void;
    function setRawHeader (headerName : QByteArray, value : QByteArray) : void;
    function setType (type : Qt_QNetworkProxy_ProxyType) : void;
    function setUser (userName : string) : void;
    function swap (other : QNetworkProxy) : void;
    function type () : Qt_QNetworkProxy_ProxyType;
    function user () : string;
}
