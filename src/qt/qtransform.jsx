/*
 * JSX wrapper code generated by JSXgenerator.
 *
 * QTransform class
 *
 * Note: DO NOT EDIT THIS FILE
 */
import "qt/qline.jsx";
import "qt/qlinef.jsx";
import "qt/qmatrix.jsx";
import "qt/qpainterpath.jsx";
import "qt/qpoint.jsx";
import "qt/qpointf.jsx";
import "qt/qpolygon.jsx";
import "qt/qpolygonf.jsx";
import "qt/qrect.jsx";
import "qt/qrectf.jsx";
import "qt/qregion.jsx";
import "qt/qt.jsx";

final native class Qt_QTransform_TransformationType {}

native class QTransform
{
    function constructor ();
    function constructor (mtx : QMatrix);
    function constructor (h11 : number, h12 : number, h13 : number, h21 : number, h22 : number, h23 : number, h31 : number, h32 : number, h33 : number);
    function constructor (h11 : number, h12 : number, h21 : number, h22 : number, dx : number, dy : number);

    // Static Members
    static function fromScale (dx : number, dy : number) : QTransform;
    static function fromTranslate (dx : number, dy : number) : QTransform;
    static function quadToQuad (one : QPolygonF, two : QPolygonF, result : QTransform) : boolean;
    static function quadToSquare (quad : QPolygonF, result : QTransform) : boolean;
    static function squareToQuad (square : QPolygonF, result : QTransform) : boolean;

    static const TxNone : Qt_QTransform_TransformationType;
    static const TxTranslate : Qt_QTransform_TransformationType;
    static const TxScale : Qt_QTransform_TransformationType;
    static const TxRotate : Qt_QTransform_TransformationType;
    static const TxShear : Qt_QTransform_TransformationType;
    static const TxProject : Qt_QTransform_TransformationType;
    static function TransformationType(value : Qt_QTransform_TransformationType) : Qt_QTransform_TransformationType;

    // Methods
    function adjoint () : QTransform;
    function det () : number;
    function determinant () : number;
    function dx () : number;
    function dy () : number;
    function inverted () : QTransform;
    function isAffine () : boolean;
    function isIdentity () : boolean;
    function isInvertible () : boolean;
    function isRotating () : boolean;
    function isScaling () : boolean;
    function isTranslating () : boolean;
    function m11 () : number;
    function m12 () : number;
    function m13 () : number;
    function m21 () : number;
    function m22 () : number;
    function m23 () : number;
    function m31 () : number;
    function m32 () : number;
    function m33 () : number;
    function map (l : QLine) : QLine;
    function map (l : QLineF) : QLineF;
    function map (p : QPainterPath) : QPainterPath;
    function map (p : QPoint) : QPoint;
    function map (p : QPointF) : QPointF;
    function map (a : QPolygon) : QPolygon;
    function map (a : QPolygonF) : QPolygonF;
    function map (r : QRegion) : QRegion;
    function mapRect (arg__1 : QRect) : QRect;
    function mapRect (arg__1 : QRectF) : QRectF;
    function mapToPolygon (r : QRect) : QPolygon;
    function multiplied (o : QTransform) : QTransform;
    function operator_add_assign (div : number) : QTransform;
    function operator_divide_assign (div : number) : QTransform;
    function operator_equal (arg__1 : QTransform) : boolean;
    function operator_multiply_assign (arg__1 : QTransform) : QTransform;
    function operator_multiply_assign (div : number) : QTransform;
    function operator_subtract_assign (div : number) : QTransform;
    function reset () : void;
    function rotate (a : number, axis : Qt_Axis) : QTransform;
    function rotateRadians (a : number, axis : Qt_Axis) : QTransform;
    function scale (sx : number, sy : number) : QTransform;
    function setMatrix (m11 : number, m12 : number, m13 : number, m21 : number, m22 : number, m23 : number, m31 : number, m32 : number, m33 : number) : void;
    function shear (sh : number, sv : number) : QTransform;
    function toAffine () : QMatrix;
    function translate (dx : number, dy : number) : QTransform;
    function transposed () : QTransform;
    function type () : Qt_QTransform_TransformationType;
}
