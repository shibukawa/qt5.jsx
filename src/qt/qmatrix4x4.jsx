/*
 * JSX wrapper code generated by JSXgenerator.
 *
 * QMatrix4x4 class
 *
 * Note: DO NOT EDIT THIS FILE
 */
import "qt/qmatrix.jsx";
import "qt/qmatrix3x3.jsx";
import "qt/qpoint.jsx";
import "qt/qpointf.jsx";
import "qt/qquaternion.jsx";
import "qt/qrect.jsx";
import "qt/qrectf.jsx";
import "qt/qtransform.jsx";
import "qt/qvector3d.jsx";
import "qt/qvector4d.jsx";

native class QMatrix4x4
{
    function constructor ();
    function constructor (matrix : QMatrix);
    function constructor (transform : QTransform);
    function constructor (values : number);
    function constructor (values : number, cols : int, rows : int);
    function constructor (m11 : number, m12 : number, m13 : number, m14 : number, m21 : number, m22 : number, m23 : number, m24 : number, m31 : number, m32 : number, m33 : number, m34 : number, m41 : number, m42 : number, m43 : number, m44 : number);

    // Methods
    function column (index : int) : QVector4D;
    function constData () : number;
    function copyDataTo (values : number) : void;
    function data () : number;
    function determinant () : number;
    function fill (value : number) : void;
    function flipCoordinates () : void;
    function frustum (left : number, right : number, bottom : number, top : number, nearPlane : number, farPlane : number) : void;
    function inverted (invertible : boolean) : QMatrix4x4;
    function isIdentity () : boolean;
    function lookAt (eye : QVector3D, center : QVector3D, up : QVector3D) : void;
    function map (point : QPoint) : QPoint;
    function map (point : QPointF) : QPointF;
    function map (point : QVector3D) : QVector3D;
    function map (point : QVector4D) : QVector4D;
    function mapRect (rect : QRect) : QRect;
    function mapRect (rect : QRectF) : QRectF;
    function mapVector (vector : QVector3D) : QVector3D;
    function normalMatrix () : QMatrix3x3;
    function operator_add_assign (other : QMatrix4x4) : QMatrix4x4;
    function operator_cast_ (row : int, column : int) : number;
    function operator_divide_assign (divisor : number) : QMatrix4x4;
    function operator_equal (other : QMatrix4x4) : boolean;
    function operator_multiply_assign (other : QMatrix4x4) : QMatrix4x4;
    function operator_multiply_assign (factor : number) : QMatrix4x4;
    function operator_subtract_assign (other : QMatrix4x4) : QMatrix4x4;
    function optimize () : void;
    function ortho (rect : QRect) : void;
    function ortho (rect : QRectF) : void;
    function ortho (left : number, right : number, bottom : number, top : number, nearPlane : number, farPlane : number) : void;
    function perspective (verticalAngle : number, aspectRatio : number, nearPlane : number, farPlane : number) : void;
    function rotate (quaternion : QQuaternion) : void;
    function rotate (angle : number, vector : QVector3D) : void;
    function rotate (angle : number, x : number, y : number, z : number) : void;
    function row (index : int) : QVector4D;
    function scale (vector : QVector3D) : void;
    function scale (factor : number) : void;
    function scale (x : number, y : number) : void;
    function scale (x : number, y : number, z : number) : void;
    function setColumn (index : int, value : QVector4D) : void;
    function setRow (index : int, value : QVector4D) : void;
    function setToIdentity () : void;
    function toAffine () : QMatrix;
    function toTransform () : QTransform;
    function toTransform (distanceToPlane : number) : QTransform;
    function translate (vector : QVector3D) : void;
    function translate (x : number, y : number) : void;
    function translate (x : number, y : number, z : number) : void;
    function transposed () : QMatrix4x4;
}
