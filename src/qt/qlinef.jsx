/*
 * JSX wrapper code generated by JSXgenerator.
 *
 * QLineF class
 *
 * Note: DO NOT EDIT THIS FILE
 */
import "qt/qline.jsx";
import "qt/qpointf.jsx";

final native class Qt_QLineF_IntersectType {}

native class QLineF
{
    function constructor ();
    function constructor (line : QLine);
    function constructor (pt1 : QPointF, pt2 : QPointF);
    function constructor (x1 : number, y1 : number, x2 : number, y2 : number);

    // Static Members
    static function fromPolar (length : number, angle : number) : QLineF;

    static const NoIntersection : Qt_QLineF_IntersectType;
    static const BoundedIntersection : Qt_QLineF_IntersectType;
    static const UnboundedIntersection : Qt_QLineF_IntersectType;
    static function IntersectType(value : Qt_QLineF_IntersectType) : Qt_QLineF_IntersectType;

    // Methods
    function angle () : number;
    function angle (l : QLineF) : number;
    function angleTo (l : QLineF) : number;
    function dx () : number;
    function dy () : number;
    function intersect (l : QLineF, intersectionPoint : QPointF) : Qt_QLineF_IntersectType;
    function isNull () : boolean;
    function length () : number;
    function normalVector () : QLineF;
    function operator_equal (d : QLineF) : boolean;
    function p1 () : QPointF;
    function p2 () : QPointF;
    function pointAt (t : number) : QPointF;
    function setAngle (angle : number) : void;
    function setLength (len : number) : void;
    function setLine (x1 : number, y1 : number, x2 : number, y2 : number) : void;
    function setP1 (p1 : QPointF) : void;
    function setP2 (p2 : QPointF) : void;
    function setPoints (p1 : QPointF, p2 : QPointF) : void;
    function toLine () : QLine;
    function translate (p : QPointF) : void;
    function translate (dx : number, dy : number) : void;
    function translated (p : QPointF) : QLineF;
    function translated (dx : number, dy : number) : QLineF;
    function unitVector () : QLineF;
    function x1 () : number;
    function x2 () : number;
    function y1 () : number;
    function y2 () : number;
}
