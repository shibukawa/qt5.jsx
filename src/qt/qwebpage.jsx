/*
 * JSX wrapper code generated by JSXgenerator.
 *
 * QWebPage class
 *
 * Note: DO NOT EDIT THIS FILE
 */
import "qt/qaction.jsx";
import "qt/qcontextmenuevent.jsx";
import "qt/qmenu.jsx";
import "qt/qnetworkaccessmanager.jsx";
import "qt/qnetworkreply.jsx";
import "qt/qnetworkrequest.jsx";
import "qt/qobject.jsx";
import "qt/qpalette.jsx";
import "qt/qpoint.jsx";
import "qt/qrect.jsx";
import "qt/qsize.jsx";
import "qt/qt.jsx";
import "qt/qundostack.jsx";
import "qt/qurl.jsx";
import "qt/qwebframe.jsx";
import "qt/qwebpage_extensionoption.jsx";
import "qt/qwebpage_extensionreturn.jsx";
import "qt/qwebsettings.jsx";
import "qt/qwidget.jsx";
import "qt/_signals.jsx";

final native class Qt_QWebPage_LinkDelegationPolicy {}

final native class Qt_QWebPage_WebWindowType {}

final native class Qt_QWebPage_NavigationType {}

final native class Qt_QWebPage_ErrorDomain {}

final native class Qt_QWebPage_Extension {}

final native class Qt_QWebPage_WebAction {}

final native class Qt_QWebPage_FindFlag {}

final native class Qt_QWebPage_FindFlags {}

native class QWebPage extends QObject
{
    function constructor (parent : QObject);

    static const DontDelegateLinks : Qt_QWebPage_LinkDelegationPolicy;
    static const DelegateExternalLinks : Qt_QWebPage_LinkDelegationPolicy;
    static const DelegateAllLinks : Qt_QWebPage_LinkDelegationPolicy;
    static function LinkDelegationPolicy(value : Qt_QWebPage_LinkDelegationPolicy) : Qt_QWebPage_LinkDelegationPolicy;

    static const WebBrowserWindow : Qt_QWebPage_WebWindowType;
    static const WebModalDialog : Qt_QWebPage_WebWindowType;
    static function WebWindowType(value : Qt_QWebPage_WebWindowType) : Qt_QWebPage_WebWindowType;

    static const NavigationTypeLinkClicked : Qt_QWebPage_NavigationType;
    static const NavigationTypeFormSubmitted : Qt_QWebPage_NavigationType;
    static const NavigationTypeBackOrForward : Qt_QWebPage_NavigationType;
    static const NavigationTypeReload : Qt_QWebPage_NavigationType;
    static const NavigationTypeFormResubmitted : Qt_QWebPage_NavigationType;
    static const NavigationTypeOther : Qt_QWebPage_NavigationType;
    static function NavigationType(value : Qt_QWebPage_NavigationType) : Qt_QWebPage_NavigationType;

    static const QtNetwork : Qt_QWebPage_ErrorDomain;
    static const Http : Qt_QWebPage_ErrorDomain;
    static const WebKit : Qt_QWebPage_ErrorDomain;
    static function ErrorDomain(value : Qt_QWebPage_ErrorDomain) : Qt_QWebPage_ErrorDomain;

    static const ChooseMultipleFilesExtension : Qt_QWebPage_Extension;
    static const ErrorPageExtension : Qt_QWebPage_Extension;
    static function Extension(value : Qt_QWebPage_Extension) : Qt_QWebPage_Extension;

    static const NoWebAction : Qt_QWebPage_WebAction;
    static const OpenLink : Qt_QWebPage_WebAction;
    static const OpenLinkInNewWindow : Qt_QWebPage_WebAction;
    static const OpenFrameInNewWindow : Qt_QWebPage_WebAction;
    static const DownloadLinkToDisk : Qt_QWebPage_WebAction;
    static const CopyLinkToClipboard : Qt_QWebPage_WebAction;
    static const OpenImageInNewWindow : Qt_QWebPage_WebAction;
    static const DownloadImageToDisk : Qt_QWebPage_WebAction;
    static const CopyImageToClipboard : Qt_QWebPage_WebAction;
    static const Back : Qt_QWebPage_WebAction;
    static const Forward : Qt_QWebPage_WebAction;
    static const Stop : Qt_QWebPage_WebAction;
    static const Reload : Qt_QWebPage_WebAction;
    static const Cut : Qt_QWebPage_WebAction;
    static const Copy : Qt_QWebPage_WebAction;
    static const Paste : Qt_QWebPage_WebAction;
    static const Undo : Qt_QWebPage_WebAction;
    static const Redo : Qt_QWebPage_WebAction;
    static const MoveToNextChar : Qt_QWebPage_WebAction;
    static const MoveToPreviousChar : Qt_QWebPage_WebAction;
    static const MoveToNextWord : Qt_QWebPage_WebAction;
    static const MoveToPreviousWord : Qt_QWebPage_WebAction;
    static const MoveToNextLine : Qt_QWebPage_WebAction;
    static const MoveToPreviousLine : Qt_QWebPage_WebAction;
    static const MoveToStartOfLine : Qt_QWebPage_WebAction;
    static const MoveToEndOfLine : Qt_QWebPage_WebAction;
    static const MoveToStartOfBlock : Qt_QWebPage_WebAction;
    static const MoveToEndOfBlock : Qt_QWebPage_WebAction;
    static const MoveToStartOfDocument : Qt_QWebPage_WebAction;
    static const MoveToEndOfDocument : Qt_QWebPage_WebAction;
    static const SelectNextChar : Qt_QWebPage_WebAction;
    static const SelectPreviousChar : Qt_QWebPage_WebAction;
    static const SelectNextWord : Qt_QWebPage_WebAction;
    static const SelectPreviousWord : Qt_QWebPage_WebAction;
    static const SelectNextLine : Qt_QWebPage_WebAction;
    static const SelectPreviousLine : Qt_QWebPage_WebAction;
    static const SelectStartOfLine : Qt_QWebPage_WebAction;
    static const SelectEndOfLine : Qt_QWebPage_WebAction;
    static const SelectStartOfBlock : Qt_QWebPage_WebAction;
    static const SelectEndOfBlock : Qt_QWebPage_WebAction;
    static const SelectStartOfDocument : Qt_QWebPage_WebAction;
    static const SelectEndOfDocument : Qt_QWebPage_WebAction;
    static const DeleteStartOfWord : Qt_QWebPage_WebAction;
    static const DeleteEndOfWord : Qt_QWebPage_WebAction;
    static const SetTextDirectionDefault : Qt_QWebPage_WebAction;
    static const SetTextDirectionLeftToRight : Qt_QWebPage_WebAction;
    static const SetTextDirectionRightToLeft : Qt_QWebPage_WebAction;
    static const ToggleBold : Qt_QWebPage_WebAction;
    static const ToggleItalic : Qt_QWebPage_WebAction;
    static const ToggleUnderline : Qt_QWebPage_WebAction;
    static const InspectElement : Qt_QWebPage_WebAction;
    static const InsertParagraphSeparator : Qt_QWebPage_WebAction;
    static const InsertLineSeparator : Qt_QWebPage_WebAction;
    static const SelectAll : Qt_QWebPage_WebAction;
    static const ReloadAndBypassCache : Qt_QWebPage_WebAction;
    static const PasteAndMatchStyle : Qt_QWebPage_WebAction;
    static const RemoveFormat : Qt_QWebPage_WebAction;
    static const ToggleStrikethrough : Qt_QWebPage_WebAction;
    static const ToggleSubscript : Qt_QWebPage_WebAction;
    static const ToggleSuperscript : Qt_QWebPage_WebAction;
    static const InsertUnorderedList : Qt_QWebPage_WebAction;
    static const InsertOrderedList : Qt_QWebPage_WebAction;
    static const Indent : Qt_QWebPage_WebAction;
    static const Outdent : Qt_QWebPage_WebAction;
    static const AlignCenter : Qt_QWebPage_WebAction;
    static const AlignJustified : Qt_QWebPage_WebAction;
    static const AlignLeft : Qt_QWebPage_WebAction;
    static const AlignRight : Qt_QWebPage_WebAction;
    static const StopScheduledPageRefresh : Qt_QWebPage_WebAction;
    static const CopyImageUrlToClipboard : Qt_QWebPage_WebAction;
    static const OpenLinkInThisWindow : Qt_QWebPage_WebAction;
    static const DownloadMediaToDisk : Qt_QWebPage_WebAction;
    static const CopyMediaUrlToClipboard : Qt_QWebPage_WebAction;
    static const ToggleMediaControls : Qt_QWebPage_WebAction;
    static const ToggleMediaLoop : Qt_QWebPage_WebAction;
    static const ToggleMediaPlayPause : Qt_QWebPage_WebAction;
    static const ToggleMediaMute : Qt_QWebPage_WebAction;
    static const ToggleVideoFullscreen : Qt_QWebPage_WebAction;
    static const WebActionCount : Qt_QWebPage_WebAction;
    static function WebAction(value : Qt_QWebPage_WebAction) : Qt_QWebPage_WebAction;

    static const FindBackward : Qt_QWebPage_FindFlag;
    static const FindCaseSensitively : Qt_QWebPage_FindFlag;
    static const FindWrapsAroundDocument : Qt_QWebPage_FindFlag;
    static const HighlightAllOccurrences : Qt_QWebPage_FindFlag;
    static const FindAtWordBeginningsOnly : Qt_QWebPage_FindFlag;
    static const TreatMedialCapitalAsWordBeginning : Qt_QWebPage_FindFlag;
    static const FindBeginsInSelection : Qt_QWebPage_FindFlag;
    static function FindFlag(value : Qt_QWebPage_FindFlag) : Qt_QWebPage_FindFlag;
    static function FindFlags(...value : Qt_QWebPage_FindFlag) : Qt_QWebPage_FindFlags;

    // Methods
    function acceptNavigationRequest (frame : QWebFrame, request : QNetworkRequest, type : Qt_QWebPage_NavigationType) : boolean;
    function action (action : Qt_QWebPage_WebAction) : QAction;
    function bytesReceived () : number;
    function chooseFile (originatingFrame : QWebFrame, oldFile : string) : string;
    function createPlugin (classid : string, url : QUrl, paramNames : string[], paramValues : string[]) : QObject;
    function createStandardContextMenu () : QMenu;
    function createWindow (type : Qt_QWebPage_WebWindowType) : QWebPage;
    function currentFrame () : QWebFrame;
    function extension (extension : Qt_QWebPage_Extension, option : QWebPage_ExtensionOption, output : QWebPage_ExtensionReturn) : boolean;
    function findText (subString : string, options : Qt_QWebPage_FindFlags) : boolean;
    function focusNextPrevChild (next : boolean) : boolean;
    function frameAt (pos : QPoint) : QWebFrame;
    function inputMethodQuery (property : Qt_InputMethodQuery) : variant;
    function javaScriptAlert (originatingFrame : QWebFrame, msg : string) : void;
    function javaScriptConfirm (originatingFrame : QWebFrame, msg : string) : boolean;
    function javaScriptConsoleMessage (message : string, lineNumber : int, sourceID : string) : void;
    function javaScriptPrompt (originatingFrame : QWebFrame, msg : string, defaultValue : string, result : string) : boolean;
    function mainFrame () : QWebFrame;
    function networkAccessManager () : QNetworkAccessManager;
    function setActualVisibleContentRect (rect : QRect) : void;
    function setNetworkAccessManager (manager : QNetworkAccessManager) : void;
    function setView (view : QWidget) : void;
    function settings () : QWebSettings;
    function shouldInterruptJavaScript () : boolean;
    function supportedContentTypes () : string[];
    function supportsContentType (mimeType : string) : boolean;
    function supportsExtension (extension : Qt_QWebPage_Extension) : boolean;
    function swallowContextMenuEvent (event : QContextMenuEvent) : boolean;
    function totalBytes () : number;
    function triggerAction (action : Qt_QWebPage_WebAction, checked : boolean) : void;
    function undoStack () : QUndoStack;
    function updatePositionDependentActions (pos : QPoint) : void;
    function userAgentForUrl (url : QUrl) : string;
    function view () : QWidget;

    // Signals
    var contentsChanged : QtJSXSignal;
    var databaseQuotaExceeded : QtJSXQWebFrameQStringSignal;
    var downloadRequested : QtJSXQNetworkRequestSignal;
    var frameCreated : QtJSXQWebFrameSignal;
    var geometryChangeRequested : QtJSXQRectSignal;
    var linkClicked : QtJSXQUrlSignal;
    var linkHovered : QtJSXQStringQStringQStringSignal;
    var loadFinished : QtJSXboolSignal;
    var loadProgress : QtJSXintSignal;
    var loadStarted : QtJSXSignal;
    var menuBarVisibilityChangeRequested : QtJSXboolSignal;
    var microFocusChanged : QtJSXSignal;
    var printRequested : QtJSXQWebFrameSignal;
    var repaintRequested : QtJSXQRectSignal;
    var restoreFrameStateRequested : QtJSXQWebFrameSignal;
    var scrollRequested : QtJSXintintQRectSignal;
    var selectionChanged : QtJSXSignal;
    var statusBarMessage : QtJSXQStringSignal;
    var statusBarVisibilityChangeRequested : QtJSXboolSignal;
    var toolBarVisibilityChangeRequested : QtJSXboolSignal;
    var unsupportedContent : QtJSXQNetworkReplySignal;
    var viewportChangeRequested : QtJSXSignal;
    var windowCloseRequested : QtJSXSignal;

    // Instance Properties
    var modified : boolean;
    var selectedText : string;
    var selectedHtml : string;
    var hasSelection : boolean;
    var viewportSize : QSize;
    var preferredContentsSize : QSize;
    var forwardUnsupportedContent : boolean;
    var linkDelegationPolicy : Qt_QWebPage_LinkDelegationPolicy;
    var palette : QPalette;
    var contentEditable : boolean;
}
